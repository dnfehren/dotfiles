# ------------------------------------------------------------------
# bashrc
# ------------------------------------------------------------------

myos=`uname -s`

case "$myos" in
  Linux)
    colorflag="--color"
    ;;
  Darwin)
    colorflag="-G"
    ;;
  *)
    colorflaag=""
    ;;
esac

# source global definitions
if [ -f /etc/bashrc ]; then
  source /etc/bashrc
fi

# source my aliases file
if [ -f $HOME/.bash_aliases ]; then
  source $HOME/.bash_aliases
fi

# source my functions file
if [ -f $HOME/.bash_functions ]
then
  source $HOME/.bash_functions
fi

# source my docker functions file
if [ -f $HOME/.bash_docker_functions ]
then
  source $HOME/.bash_docker_functions
fi

# setup some key bindings
if [ -f $HOME/.bash_bindkeys ]
then
  source $HOME/.bash_bindkeys
fi

# add some color
if [ -f $HOME/.bash_colors ]
then
  source $HOME/.bash_colors
fi

# add brew bash completions
if [ -f /usr/local/Library/Contributions/brew_bash_completions.sh ]
then
  source /usr/local/Library/Contributions/brew_bash_completions.sh
fi

# add tmux completions
if [ -f /usr/local/etc/bash_completions.d/tmux ]
then
  source /usr/local/etc/bash_completions.d/tmux
fi

# add git completions
if [ -f /usr/local/etc/bash_completions.d/git-completions.bash ]
then
  source /usr/local/etc/bash_completions.d/git-completions.bash
fi

# export EDITOR, PAGER, and LESS 
export VISUAL=vim
export EDITOR="$VISUAL"
export PAGER=less
export LESS="-M -n -q -i -r"

# Go path
export GOPATH=$HOME/code/go
export PATH=$PATH:$GOPATH/bin

# Prefer US English and use UTF-8
export LANG="en_US.UTF-8";
export LC_ALL="en_US.UTF-8";

# allow redirection to overwrite file
unset noclobber

# umask: 002 lets group members create/modify files. outsiders can only read
umask 002

# ----------------------------------
# Build a Git aware prompt
# ---------------------------------
# get current branch in git repo
function parse_git_branch() {
  BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
  if [ ! "${BRANCH}" == "" ]
  then
    STAT=`parse_git_dirty`
    echo "[${BRANCH}${STAT}]"
  else
    echo ""
  fi
}

# get current status of git repo
function parse_git_dirty {
  status=`git status 2>&1 | tee`
  dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
  untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
  ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
  newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
  renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
  deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
  bits=''
  if [ "${renamed}" == "0" ]; then
    bits=">${bits}"
  fi
  if [ "${ahead}" == "0" ]; then
    bits="*${bits}"
  fi
  if [ "${newfile}" == "0" ]; then
    bits="+${bits}"
  fi
  if [ "${untracked}" == "0" ]; then
    bits="?${bits}"
  fi
  if [ "${deleted}" == "0" ]; then
    bits="x${bits}"
  fi
  if [ "${dirty}" == "0" ]; then
    bits="!${bits}"
  fi
  if [ ! "${bits}" == "" ]; then
    echo " ${bits}"
  else
    echo ""
  fi
}

export PS1="\[\e[33m\]\`parse_git_branch\`\[\e[m\]\[\e[34m\]\W\[\e[m\] $ "

# configure how history works
HISTCONTROL=ignoredups                            # ignore the line if it matches previous line
HISTFILESIZE=20000                                # size of the history file cf. also shopt -s histappend
HISTSIZE=1000                                     # size of the run-time history list
HISTIGNORE=ls:ll:la:l:cd:pwd:exit:mc:su:df:clear  # do not put these in history file
HISTFILE=~/.bash_history-`hostname`               # track history by host

# export settings
export HISTCONTROL HISTFILESIZE HISTSIZE HISTIGNORE HISTFILE 

export LS_COLORS='no=00:fi=00:di=01;34:ow=01;31:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'

# -------------------------------------------------------------------
# Color man pages:
# -------------------------------------------------------------------
export LESS_TERMCAP_mb=$'\E[01;31m'      # begin blinking
export LESS_TERMCAP_md=$'\E[01;31m'      # begin bold
export LESS_TERMCAP_me=$'\E[0m'          # end mode
export LESS_TERMCAP_se=$'\E[0m'          # end standout-mode
export LESS_TERMCAP_so=$'\E[01;44;33m'   # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'          # end underline
export LESS_TERMCAP_us=$'\E[01;32m'      # begin underline

# finis
# mhn 2016.01.11 
